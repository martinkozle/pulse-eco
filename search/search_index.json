{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":""},{"location":"#pulse-eco","title":"pulse-eco","text":"<p>pulse.eco client for Python.</p>"},{"location":"#installation","title":"Installation","text":"<p>Requires Python version 3.8+.</p> <p>The <code>pulse-eco</code> package comes with no base dependencies, everything is an extra. A sensible default is:</p> <pre><code>python -m pip install pulse-eco[client,httpx]\n</code></pre>"},{"location":"#list-of-extras","title":"List of extras","text":"<ul> <li><code>client</code> - includes Pydantic, used for the higher level validated client (<code>pulseeco.client</code>).</li> <li><code>requests</code> - includes requests HTTP client with sync support.</li> <li><code>aiohttp</code> - includes aiohttp HTTP client with async support.</li> <li><code>httpx</code> - includes HTTPX HTTP client with both sync and async support.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>API Reference and User Guide for this package is available on GitHub Pages.</p> <p>Official pulse.eco REST API documentation can be found on pulse.eco/restapi.</p>"},{"location":"#requesting-data-with-a-larger-time-range","title":"Requesting data with a larger time range","text":"<p>The pulse.eco API limits the maximum time span of data you can get from one request. For <code>/dataRaw</code> it is one week, while for <code>/avgData</code> it is one year.</p> <p>If the time range is larger than the maximum, the pulse-eco Python client performs multiple requests to the API and then joins the data together. Be aware of this.</p>"},{"location":"#development","title":"Development","text":""},{"location":"#install-hatch","title":"Install Hatch","text":"<p>https://hatch.pypa.io/latest/install/</p>"},{"location":"#create-dev-environment","title":"Create dev environment","text":"<p>Activate a Python 3.8 environment and run:</p> <pre><code>hatch env create dev\n</code></pre> <p>To delete the environment, run:</p> <pre><code>hatch env remove dev\n</code></pre>"},{"location":"#install-pre-commit-hooks","title":"Install pre-commit hooks","text":"<pre><code>hatch run dev:setup\n</code></pre>"},{"location":"#create-env-file","title":"Create .env file","text":"<p>Set auth credentials in <code>.env</code> file:</p> <pre><code>cp .env.example .env\n</code></pre>"},{"location":"#before-committing","title":"Before committing","text":"<p>This command must pass without errors before committing:</p> <pre><code>hatch run dev:check\n</code></pre>"},{"location":"#docs","title":"Docs","text":"<p>To preview the docs locally, run:</p> <pre><code>hatch run dev:docs-serve\n</code></pre>"},{"location":"PulseEcoAPI/","title":"PulseEcoAPI","text":""},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI","title":"<code>PulseEcoAPI</code>","text":"<p>               Bases: <code>PulseEcoAPIBase</code></p> <p>Low level unsafe pulse.eco API wrapper.</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>class PulseEcoAPI(PulseEcoAPIBase):\n    \"\"\"Low level unsafe pulse.eco API wrapper.\"\"\"\n\n    def __init__(\n        self,\n        city_name: str,\n        auth: tuple[str, str] | None = None,\n        base_url: str = PULSE_ECO_BASE_URL_FORMAT,\n        session: None = None,\n        client: CLIENT | None = None,\n        async_client: ASYNC_CLIENT | None = None,\n    ) -&gt; None:\n        \"\"\"Initialize the pulse.eco API wrapper.\n\n        :param city_name: the city name\n        :param auth: a tuple of (email, password), defaults to None\n        :param base_url: the base URL of the API, defaults to\n            'https://{city_name}.pulse.eco/rest/{end_point}'\n        :param session: deprecated, use client and async_client instead\n        :param client: a sync http client, supported types are:\n            requests.Session, httpx.Client,\n            defaults to None which uses a new requests.Session for each request,\n            use a context managed session for better performance and resource management\n        :param async_client: an async http client, supported types are:\n            aiohttp.ClientSession, httpx.AsyncClient,\n            defaults to None which will use the sync client\n        \"\"\"\n        self.city_name = city_name\n\n        if base_url is not None and PULSE_ECO_BASE_URL_FORMAT_ENV_KEY in os.environ:\n            base_url = os.environ[PULSE_ECO_BASE_URL_FORMAT_ENV_KEY]\n\n        if session is not None:  # pragma: no cover\n            warnings.warn(\n                \"The `session` parameter is deprecated. \"\n                \"Use `client` and `async_client` instead.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n\n        client = client if client is not None else session\n\n        self._client: CLIENT\n\n        if client is not None:\n            self._client = client\n        else:\n            self._client = get_fallback_sync_client()\n\n        self._async_client = async_client\n\n        if auth is None:\n            auth = get_auth_from_env(city_name=city_name)\n\n        self._auth = auth\n\n        self._base_url = base_url\n\n    def _base_request(\n        self, end_point: str, params: dict[str, Any] | None = None\n    ) -&gt; Any:  # noqa: ANN401\n        \"\"\"Make a request to the PulseEco API.\n\n        :param end_point: an end point of the API\n        :param params: get parameters, defaults to None\n        :return: the response json\n        \"\"\"\n        if params is None:\n            params = {}\n        url = self._base_url.format(city_name=self.city_name, end_point=end_point)\n\n        # httpx does not support auth None\n        if self._auth is not None:\n            response = self._client.get(url, params=params, auth=self._auth)\n        else:\n            response = self._client.get(url, params=params)\n        response.raise_for_status()\n\n        return response.json()\n\n    async def _abase_request(\n        self, end_point: str, params: dict[str, Any] | None = None\n    ) -&gt; Any:  # noqa: ANN401\n        \"\"\"Make an async request to the PulseEco API.\n\n        :param end_point: an end point of the API\n        :param params: get parameters, defaults to None\n        :return: the response json\n        \"\"\"\n        if self._async_client is None:\n            return self._base_request(end_point, params)\n\n        if params is None:\n            params = {}\n\n        url = self._base_url.format(city_name=self.city_name, end_point=end_point)\n\n        # httpx does not support auth None\n        if self._auth is not None:\n            response = await self._async_client.get(url, params=params, auth=self._auth)\n        else:\n            response = await self._async_client.get(url, params=params)\n        response.raise_for_status()\n\n        # In case of aiohttp, the response.json() is a coroutine function\n        if inspect.iscoroutinefunction(response.json):\n            return await response.json()\n        return response.json()\n\n    def sensors(self) -&gt; list[Sensor]:\n        \"\"\"Get all sensors for a city.\n\n        :return: a list of sensors\n        \"\"\"\n        return cast(List[Sensor], self._base_request(\"sensor\"))\n\n    async def asensors(self) -&gt; list[Sensor]:\n        \"\"\"Get all sensors for a city.\n\n        :return: a list of sensors\n        \"\"\"\n        return cast(List[Sensor], await self._abase_request(\"sensor\"))\n\n    def sensor(self, sensor_id: str) -&gt; Sensor:\n        \"\"\"Get a sensor by it's ID\n\n        :param sensor_id: the unique ID of the sensor\n        :return: a sensor\n        \"\"\"\n        return cast(Sensor, self._base_request(f\"sensor/{sensor_id}\"))\n\n    async def asensor(self, sensor_id: str) -&gt; Sensor:\n        \"\"\"Get a sensor by it's ID\n\n        :param sensor_id: the unique ID of the sensor\n        :return: a sensor\n        \"\"\"\n        return cast(Sensor, await self._abase_request(f\"sensor/{sensor_id}\"))\n\n    def data_raw(\n        self,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: str | None = None,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValueRaw]:\n        \"\"\"Get raw data for a city.\n\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type, defaults to None\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of data values\n        \"\"\"\n        if sensor_id is None and type is None:\n            warnings.warn(\n                \"Warning! If you encounter an error, \"\n                \"you should probably specify either sensor_id or type.\",\n                stacklevel=2,\n            )\n        data: list[DataValueRaw] = []\n        datetime_spans = split_datetime_span(from_, to, DATA_RAW_MAX_SPAN)\n        for from_temp, to_temp in datetime_spans:\n            params = {\n                \"sensorId\": sensor_id,\n                \"type\": type,\n                \"from\": convert_datetime_to_str(from_temp),\n                \"to\": convert_datetime_to_str(to_temp),\n            }\n            params = {k: v for k, v in params.items() if v is not None}\n            data_value = cast(\n                List[DataValueRaw],\n                self._base_request(\"dataRaw\", params=params),\n            )\n            data += data_value\n        return data\n\n    async def adata_raw(\n        self,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: str | None = None,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValueRaw]:\n        \"\"\"Get raw data for a city.\n\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type, defaults to None\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of data values\n        \"\"\"\n        if sensor_id is None and type is None:\n            warnings.warn(\n                \"Warning! If you encounter an error, \"\n                \"you should probably specify either sensor_id or type.\",\n                stacklevel=2,\n            )\n        coroutines: list[asyncio.Future[list[DataValueRaw]]] = []\n        datetime_spans = split_datetime_span(from_, to, DATA_RAW_MAX_SPAN)\n        for from_temp, to_temp in datetime_spans:\n            params = {\n                \"sensorId\": sensor_id,\n                \"type\": type,\n                \"from\": convert_datetime_to_str(from_temp),\n                \"to\": convert_datetime_to_str(to_temp),\n            }\n            params = {k: v for k, v in params.items() if v is not None}\n            coroutines.append(\n                cast(\n                    \"asyncio.Future[list[DataValueRaw]]\",\n                    self._abase_request(\"dataRaw\", params=params),\n                )\n            )\n        return [\n            data\n            for data_value in await asyncio.gather(*coroutines)\n            for data in data_value\n        ]\n\n    def avg_data(\n        self,\n        period: str,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: str,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValueAvg]:\n        \"\"\"Get average data for a city.\n\n        :param period: the period of the average data (day, week, month)\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of average data values\n        \"\"\"\n        if period not in {\"day\", \"week\", \"month\"}:\n            warnings.warn(\n                \"Warning! Invalid value for period. \"\n                \"Should be one of: day, week, month\",\n                stacklevel=2,\n            )\n        data: list[DataValueAvg] = []\n        datetime_spans = split_datetime_span(from_, to, AVG_DATA_MAX_SPAN)\n        for from_temp, to_temp in datetime_spans:\n            params = {\n                \"sensorId\": sensor_id,\n                \"type\": type,\n                \"from\": convert_datetime_to_str(from_temp),\n                \"to\": convert_datetime_to_str(to_temp),\n            }\n            params = {k: v for k, v in params.items() if v is not None}\n            data_value = cast(\n                List[DataValueAvg],\n                self._base_request(f\"avgData/{period}\", params=params),\n            )\n            data += data_value\n        return data\n\n    async def aavg_data(\n        self,\n        period: str,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: str,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValueAvg]:\n        \"\"\"Get average data for a city.\n\n        :param period: the period of the average data (day, week, month)\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of average data values\n        \"\"\"\n        if period not in {\"day\", \"week\", \"month\"}:\n            warnings.warn(\n                \"Warning! Invalid value for period. \"\n                \"Should be one of: day, week, month\",\n                stacklevel=2,\n            )\n        coroutines: list[asyncio.Future[list[DataValueAvg]]] = []\n        datetime_spans = split_datetime_span(from_, to, AVG_DATA_MAX_SPAN)\n        for from_temp, to_temp in datetime_spans:\n            params = {\n                \"sensorId\": sensor_id,\n                \"type\": type,\n                \"from\": convert_datetime_to_str(from_temp),\n                \"to\": convert_datetime_to_str(to_temp),\n            }\n            params = {k: v for k, v in params.items() if v is not None}\n            coroutines.append(\n                cast(\n                    \"asyncio.Future[list[DataValueAvg]]\",\n                    self._abase_request(f\"avgData/{period}\", params=params),\n                )\n            )\n        return [\n            data\n            for data_value in await asyncio.gather(*coroutines)\n            for data in data_value\n        ]\n\n    def data24h(self) -&gt; list[DataValueRaw]:\n        \"\"\"Get 24h data for a city.\n\n        The data values are sorted ascending by their timestamp.\n\n        :return: a list of data values for the past 24 hours\n        \"\"\"\n        return cast(List[DataValueRaw], self._base_request(\"data24h\"))\n\n    async def adata24h(self) -&gt; list[DataValueRaw]:\n        \"\"\"Get 24h data for a city.\n\n        The data values are sorted ascending by their timestamp.\n\n        :return: a list of data values for the past 24 hours\n        \"\"\"\n        return cast(List[DataValueRaw], await self._abase_request(\"data24h\"))\n\n    def current(self) -&gt; list[DataValueRaw]:\n        \"\"\"Get the last received valid data for each sensor in a city\n\n        Will not return sensor data older than 2 hours.\n\n        :return: a list of current data values\n        \"\"\"\n        return cast(List[DataValueRaw], self._base_request(\"current\"))\n\n    async def acurrent(self) -&gt; list[DataValueRaw]:\n        \"\"\"Get the last received valid data for each sensor in a city\n\n        Will not return sensor data older than 2 hours.\n\n        :return: a list of current data values\n        \"\"\"\n        return cast(List[DataValueRaw], await self._abase_request(\"current\"))\n\n    def overall(\n        self,\n    ) -&gt; Overall:\n        \"\"\"Get the current average data for all sensors per value for a city.\n\n        ## Example:\n\n        ```python\n        {\n            'cityName': 'skopje',\n            'values': {\n                'no2': '22',\n                'o3': '4',\n                'pm25': '53',\n                'pm10': '73',\n                'temperature': '7',\n                'humidity': '71',\n                'pressure': '992',\n                'noise_dba': '43'\n            }\n        }\n        ```\n\n        :return: the overall data for the city\n        \"\"\"\n        return cast(Overall, self._base_request(\"overall\"))\n\n    async def aoverall(\n        self,\n    ) -&gt; Overall:\n        \"\"\"Get the current average data for all sensors per value for a city.\n\n        ## Example:\n\n        ```python\n        {\n            'cityName': 'skopje',\n            'values': {\n                'no2': '22',\n                'o3': '4',\n                'pm25': '53',\n                'pm10': '73',\n                'temperature': '7',\n                'humidity': '71',\n                'pressure': '992',\n                'noise_dba': '43'\n            }\n        }\n        ```\n\n        :return: the overall data for the city\n        \"\"\"\n        return cast(Overall, await self._abase_request(\"overall\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.__init__","title":"<code>__init__(city_name, auth=None, base_url=PULSE_ECO_BASE_URL_FORMAT, session=None, client=None, async_client=None)</code>","text":"<p>Initialize the pulse.eco API wrapper.</p> <p>Parameters:</p> Name Type Description Default <code>city_name</code> <code>str</code> <p>the city name</p> required <code>auth</code> <code>tuple[str, str] | None</code> <p>a tuple of (email, password), defaults to None</p> <code>None</code> <code>base_url</code> <code>str</code> <p>the base URL of the API, defaults to 'https://{city_name}.pulse.eco/rest/{end_point}'</p> <code>PULSE_ECO_BASE_URL_FORMAT</code> <code>session</code> <code>None</code> <p>deprecated, use client and async_client instead</p> <code>None</code> <code>client</code> <code>CLIENT | None</code> <p>a sync http client, supported types are: requests.Session, httpx.Client, defaults to None which uses a new requests.Session for each request, use a context managed session for better performance and resource management</p> <code>None</code> <code>async_client</code> <code>ASYNC_CLIENT | None</code> <p>an async http client, supported types are: aiohttp.ClientSession, httpx.AsyncClient, defaults to None which will use the sync client</p> <code>None</code> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def __init__(\n    self,\n    city_name: str,\n    auth: tuple[str, str] | None = None,\n    base_url: str = PULSE_ECO_BASE_URL_FORMAT,\n    session: None = None,\n    client: CLIENT | None = None,\n    async_client: ASYNC_CLIENT | None = None,\n) -&gt; None:\n    \"\"\"Initialize the pulse.eco API wrapper.\n\n    :param city_name: the city name\n    :param auth: a tuple of (email, password), defaults to None\n    :param base_url: the base URL of the API, defaults to\n        'https://{city_name}.pulse.eco/rest/{end_point}'\n    :param session: deprecated, use client and async_client instead\n    :param client: a sync http client, supported types are:\n        requests.Session, httpx.Client,\n        defaults to None which uses a new requests.Session for each request,\n        use a context managed session for better performance and resource management\n    :param async_client: an async http client, supported types are:\n        aiohttp.ClientSession, httpx.AsyncClient,\n        defaults to None which will use the sync client\n    \"\"\"\n    self.city_name = city_name\n\n    if base_url is not None and PULSE_ECO_BASE_URL_FORMAT_ENV_KEY in os.environ:\n        base_url = os.environ[PULSE_ECO_BASE_URL_FORMAT_ENV_KEY]\n\n    if session is not None:  # pragma: no cover\n        warnings.warn(\n            \"The `session` parameter is deprecated. \"\n            \"Use `client` and `async_client` instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n    client = client if client is not None else session\n\n    self._client: CLIENT\n\n    if client is not None:\n        self._client = client\n    else:\n        self._client = get_fallback_sync_client()\n\n    self._async_client = async_client\n\n    if auth is None:\n        auth = get_auth_from_env(city_name=city_name)\n\n    self._auth = auth\n\n    self._base_url = base_url\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.aavg_data","title":"<code>aavg_data(period, from_, to, type, sensor_id=None)</code>  <code>async</code>","text":"<p>Get average data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>str</code> <p>the period of the average data (day, week, month)</p> required <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>str</code> <p>the data value type</p> required <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValueAvg]</code> <p>a list of average data values</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def aavg_data(\n    self,\n    period: str,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: str,\n    sensor_id: str | None = None,\n) -&gt; list[DataValueAvg]:\n    \"\"\"Get average data for a city.\n\n    :param period: the period of the average data (day, week, month)\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of average data values\n    \"\"\"\n    if period not in {\"day\", \"week\", \"month\"}:\n        warnings.warn(\n            \"Warning! Invalid value for period. \"\n            \"Should be one of: day, week, month\",\n            stacklevel=2,\n        )\n    coroutines: list[asyncio.Future[list[DataValueAvg]]] = []\n    datetime_spans = split_datetime_span(from_, to, AVG_DATA_MAX_SPAN)\n    for from_temp, to_temp in datetime_spans:\n        params = {\n            \"sensorId\": sensor_id,\n            \"type\": type,\n            \"from\": convert_datetime_to_str(from_temp),\n            \"to\": convert_datetime_to_str(to_temp),\n        }\n        params = {k: v for k, v in params.items() if v is not None}\n        coroutines.append(\n            cast(\n                \"asyncio.Future[list[DataValueAvg]]\",\n                self._abase_request(f\"avgData/{period}\", params=params),\n            )\n        )\n    return [\n        data\n        for data_value in await asyncio.gather(*coroutines)\n        for data in data_value\n    ]\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.acurrent","title":"<code>acurrent()</code>  <code>async</code>","text":"<p>Get the last received valid data for each sensor in a city</p> <p>Will not return sensor data older than 2 hours.</p> <p>Returns:</p> Type Description <code>list[DataValueRaw]</code> <p>a list of current data values</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def acurrent(self) -&gt; list[DataValueRaw]:\n    \"\"\"Get the last received valid data for each sensor in a city\n\n    Will not return sensor data older than 2 hours.\n\n    :return: a list of current data values\n    \"\"\"\n    return cast(List[DataValueRaw], await self._abase_request(\"current\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.adata24h","title":"<code>adata24h()</code>  <code>async</code>","text":"<p>Get 24h data for a city.</p> <p>The data values are sorted ascending by their timestamp.</p> <p>Returns:</p> Type Description <code>list[DataValueRaw]</code> <p>a list of data values for the past 24 hours</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def adata24h(self) -&gt; list[DataValueRaw]:\n    \"\"\"Get 24h data for a city.\n\n    The data values are sorted ascending by their timestamp.\n\n    :return: a list of data values for the past 24 hours\n    \"\"\"\n    return cast(List[DataValueRaw], await self._abase_request(\"data24h\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.adata_raw","title":"<code>adata_raw(from_, to, type=None, sensor_id=None)</code>  <code>async</code>","text":"<p>Get raw data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>str | None</code> <p>the data value type, defaults to None</p> <code>None</code> <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValueRaw]</code> <p>a list of data values</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def adata_raw(\n    self,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: str | None = None,\n    sensor_id: str | None = None,\n) -&gt; list[DataValueRaw]:\n    \"\"\"Get raw data for a city.\n\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type, defaults to None\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of data values\n    \"\"\"\n    if sensor_id is None and type is None:\n        warnings.warn(\n            \"Warning! If you encounter an error, \"\n            \"you should probably specify either sensor_id or type.\",\n            stacklevel=2,\n        )\n    coroutines: list[asyncio.Future[list[DataValueRaw]]] = []\n    datetime_spans = split_datetime_span(from_, to, DATA_RAW_MAX_SPAN)\n    for from_temp, to_temp in datetime_spans:\n        params = {\n            \"sensorId\": sensor_id,\n            \"type\": type,\n            \"from\": convert_datetime_to_str(from_temp),\n            \"to\": convert_datetime_to_str(to_temp),\n        }\n        params = {k: v for k, v in params.items() if v is not None}\n        coroutines.append(\n            cast(\n                \"asyncio.Future[list[DataValueRaw]]\",\n                self._abase_request(\"dataRaw\", params=params),\n            )\n        )\n    return [\n        data\n        for data_value in await asyncio.gather(*coroutines)\n        for data in data_value\n    ]\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.aoverall","title":"<code>aoverall()</code>  <code>async</code>","text":"<p>Get the current average data for all sensors per value for a city.</p>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.aoverall--example","title":"Example:","text":"<pre><code>{\n    'cityName': 'skopje',\n    'values': {\n        'no2': '22',\n        'o3': '4',\n        'pm25': '53',\n        'pm10': '73',\n        'temperature': '7',\n        'humidity': '71',\n        'pressure': '992',\n        'noise_dba': '43'\n    }\n}\n</code></pre> <p>Returns:</p> Type Description <code>Overall</code> <p>the overall data for the city</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def aoverall(\n    self,\n) -&gt; Overall:\n    \"\"\"Get the current average data for all sensors per value for a city.\n\n    ## Example:\n\n    ```python\n    {\n        'cityName': 'skopje',\n        'values': {\n            'no2': '22',\n            'o3': '4',\n            'pm25': '53',\n            'pm10': '73',\n            'temperature': '7',\n            'humidity': '71',\n            'pressure': '992',\n            'noise_dba': '43'\n        }\n    }\n    ```\n\n    :return: the overall data for the city\n    \"\"\"\n    return cast(Overall, await self._abase_request(\"overall\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.asensor","title":"<code>asensor(sensor_id)</code>  <code>async</code>","text":"<p>Get a sensor by it's ID</p> <p>Parameters:</p> Name Type Description Default <code>sensor_id</code> <code>str</code> <p>the unique ID of the sensor</p> required <p>Returns:</p> Type Description <code>Sensor</code> <p>a sensor</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def asensor(self, sensor_id: str) -&gt; Sensor:\n    \"\"\"Get a sensor by it's ID\n\n    :param sensor_id: the unique ID of the sensor\n    :return: a sensor\n    \"\"\"\n    return cast(Sensor, await self._abase_request(f\"sensor/{sensor_id}\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.asensors","title":"<code>asensors()</code>  <code>async</code>","text":"<p>Get all sensors for a city.</p> <p>Returns:</p> Type Description <code>list[Sensor]</code> <p>a list of sensors</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>async def asensors(self) -&gt; list[Sensor]:\n    \"\"\"Get all sensors for a city.\n\n    :return: a list of sensors\n    \"\"\"\n    return cast(List[Sensor], await self._abase_request(\"sensor\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.avg_data","title":"<code>avg_data(period, from_, to, type, sensor_id=None)</code>","text":"<p>Get average data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>str</code> <p>the period of the average data (day, week, month)</p> required <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>str</code> <p>the data value type</p> required <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValueAvg]</code> <p>a list of average data values</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def avg_data(\n    self,\n    period: str,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: str,\n    sensor_id: str | None = None,\n) -&gt; list[DataValueAvg]:\n    \"\"\"Get average data for a city.\n\n    :param period: the period of the average data (day, week, month)\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of average data values\n    \"\"\"\n    if period not in {\"day\", \"week\", \"month\"}:\n        warnings.warn(\n            \"Warning! Invalid value for period. \"\n            \"Should be one of: day, week, month\",\n            stacklevel=2,\n        )\n    data: list[DataValueAvg] = []\n    datetime_spans = split_datetime_span(from_, to, AVG_DATA_MAX_SPAN)\n    for from_temp, to_temp in datetime_spans:\n        params = {\n            \"sensorId\": sensor_id,\n            \"type\": type,\n            \"from\": convert_datetime_to_str(from_temp),\n            \"to\": convert_datetime_to_str(to_temp),\n        }\n        params = {k: v for k, v in params.items() if v is not None}\n        data_value = cast(\n            List[DataValueAvg],\n            self._base_request(f\"avgData/{period}\", params=params),\n        )\n        data += data_value\n    return data\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.current","title":"<code>current()</code>","text":"<p>Get the last received valid data for each sensor in a city</p> <p>Will not return sensor data older than 2 hours.</p> <p>Returns:</p> Type Description <code>list[DataValueRaw]</code> <p>a list of current data values</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def current(self) -&gt; list[DataValueRaw]:\n    \"\"\"Get the last received valid data for each sensor in a city\n\n    Will not return sensor data older than 2 hours.\n\n    :return: a list of current data values\n    \"\"\"\n    return cast(List[DataValueRaw], self._base_request(\"current\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.data24h","title":"<code>data24h()</code>","text":"<p>Get 24h data for a city.</p> <p>The data values are sorted ascending by their timestamp.</p> <p>Returns:</p> Type Description <code>list[DataValueRaw]</code> <p>a list of data values for the past 24 hours</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def data24h(self) -&gt; list[DataValueRaw]:\n    \"\"\"Get 24h data for a city.\n\n    The data values are sorted ascending by their timestamp.\n\n    :return: a list of data values for the past 24 hours\n    \"\"\"\n    return cast(List[DataValueRaw], self._base_request(\"data24h\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.data_raw","title":"<code>data_raw(from_, to, type=None, sensor_id=None)</code>","text":"<p>Get raw data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>str | None</code> <p>the data value type, defaults to None</p> <code>None</code> <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValueRaw]</code> <p>a list of data values</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def data_raw(\n    self,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: str | None = None,\n    sensor_id: str | None = None,\n) -&gt; list[DataValueRaw]:\n    \"\"\"Get raw data for a city.\n\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type, defaults to None\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of data values\n    \"\"\"\n    if sensor_id is None and type is None:\n        warnings.warn(\n            \"Warning! If you encounter an error, \"\n            \"you should probably specify either sensor_id or type.\",\n            stacklevel=2,\n        )\n    data: list[DataValueRaw] = []\n    datetime_spans = split_datetime_span(from_, to, DATA_RAW_MAX_SPAN)\n    for from_temp, to_temp in datetime_spans:\n        params = {\n            \"sensorId\": sensor_id,\n            \"type\": type,\n            \"from\": convert_datetime_to_str(from_temp),\n            \"to\": convert_datetime_to_str(to_temp),\n        }\n        params = {k: v for k, v in params.items() if v is not None}\n        data_value = cast(\n            List[DataValueRaw],\n            self._base_request(\"dataRaw\", params=params),\n        )\n        data += data_value\n    return data\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.overall","title":"<code>overall()</code>","text":"<p>Get the current average data for all sensors per value for a city.</p>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.overall--example","title":"Example:","text":"<pre><code>{\n    'cityName': 'skopje',\n    'values': {\n        'no2': '22',\n        'o3': '4',\n        'pm25': '53',\n        'pm10': '73',\n        'temperature': '7',\n        'humidity': '71',\n        'pressure': '992',\n        'noise_dba': '43'\n    }\n}\n</code></pre> <p>Returns:</p> Type Description <code>Overall</code> <p>the overall data for the city</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def overall(\n    self,\n) -&gt; Overall:\n    \"\"\"Get the current average data for all sensors per value for a city.\n\n    ## Example:\n\n    ```python\n    {\n        'cityName': 'skopje',\n        'values': {\n            'no2': '22',\n            'o3': '4',\n            'pm25': '53',\n            'pm10': '73',\n            'temperature': '7',\n            'humidity': '71',\n            'pressure': '992',\n            'noise_dba': '43'\n        }\n    }\n    ```\n\n    :return: the overall data for the city\n    \"\"\"\n    return cast(Overall, self._base_request(\"overall\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.sensor","title":"<code>sensor(sensor_id)</code>","text":"<p>Get a sensor by it's ID</p> <p>Parameters:</p> Name Type Description Default <code>sensor_id</code> <code>str</code> <p>the unique ID of the sensor</p> required <p>Returns:</p> Type Description <code>Sensor</code> <p>a sensor</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def sensor(self, sensor_id: str) -&gt; Sensor:\n    \"\"\"Get a sensor by it's ID\n\n    :param sensor_id: the unique ID of the sensor\n    :return: a sensor\n    \"\"\"\n    return cast(Sensor, self._base_request(f\"sensor/{sensor_id}\"))\n</code></pre>"},{"location":"PulseEcoAPI/#pulseeco.api.PulseEcoAPI.sensors","title":"<code>sensors()</code>","text":"<p>Get all sensors for a city.</p> <p>Returns:</p> Type Description <code>list[Sensor]</code> <p>a list of sensors</p> Source code in <code>pulseeco/api/pulse_eco_api.py</code> <pre><code>def sensors(self) -&gt; list[Sensor]:\n    \"\"\"Get all sensors for a city.\n\n    :return: a list of sensors\n    \"\"\"\n    return cast(List[Sensor], self._base_request(\"sensor\"))\n</code></pre>"},{"location":"PulseEcoClient/","title":"PulseEcoClient","text":""},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient","title":"<code>PulseEcoClient</code>","text":"<p>High level pulse.eco client.</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>class PulseEcoClient:\n    \"\"\"High level pulse.eco client.\"\"\"\n\n    def __init__(\n        self,\n        city_name: str,\n        auth: tuple[str, str] | None = None,\n        base_url: str = PULSE_ECO_BASE_URL_FORMAT,\n        session: None = None,\n        client: CLIENT | None = None,\n        async_client: ASYNC_CLIENT | None = None,\n        pulse_eco_api: PulseEcoAPIBase | None = None,\n    ) -&gt; None:\n        \"\"\"Initialize the pulse.eco client.\n\n        :param city_name: the city name\n        :param auth: a tuple of (email, password), defaults to None\n        :param base_url: the base URL of the API, defaults to\n            'https://{city_name}.pulse.eco/rest/{end_point}'\n        :param session: deprecated, use client and async_client instead\n        :param client: a sync http client, supported types are:\n            requests.Session, httpx.Client,\n            defaults to None which uses a new requests.Session for each request,\n            use a context managed session for better performance and resource management\n        :param async_client: an async http client, supported types are:\n            aiohttp.ClientSession, httpx.AsyncClient,\n            defaults to None which will use the sync client\n        :param pulse_eco_api: a pulse.eco API wrapper, defaults to None,\n            if set, the other parameters are ignored\n        \"\"\"\n        self._pulse_eco_api: PulseEcoAPIBase\n        if pulse_eco_api is None:\n            self._pulse_eco_api = PulseEcoAPI(\n                city_name=city_name,\n                auth=auth,\n                base_url=base_url,\n                session=session,\n                client=client,\n                async_client=async_client,\n            )\n        else:\n            self._pulse_eco_api = pulse_eco_api\n\n    def sensors(self) -&gt; list[Sensor]:\n        \"\"\"Get all sensors for a city.\n\n        :return: a list of sensors\n        \"\"\"\n        return Sensors.validate_python(self._pulse_eco_api.sensors())\n\n    async def asensors(self) -&gt; list[Sensor]:\n        \"\"\"Get all sensors for a city.\n\n        :return: a list of sensors\n        \"\"\"\n        return Sensors.validate_python(await self._pulse_eco_api.asensors())\n\n    def sensor(self, sensor_id: str) -&gt; Sensor:\n        \"\"\"Get a sensor by it's ID.\n\n        :param sensor_id: the unique ID of the sensor\n        :return: a sensor\n        \"\"\"\n        return Sensor.model_validate(self._pulse_eco_api.sensor(sensor_id=sensor_id))\n\n    async def asensor(self, sensor_id: str) -&gt; Sensor:\n        \"\"\"Get a sensor by it's ID.\n\n        :param sensor_id: the unique ID of the sensor\n        :return: a sensor\n        \"\"\"\n        return Sensor.model_validate(\n            await self._pulse_eco_api.asensor(sensor_id=sensor_id)\n        )\n\n    def data_raw(\n        self,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: DataValueType | None = None,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValue]:\n        \"\"\"Get raw data for a city.\n\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type, defaults to None\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of data values\n        \"\"\"\n        return DataValues.validate_python(\n            self._pulse_eco_api.data_raw(\n                from_=from_,\n                to=to,\n                type=type.value if type is not None else None,\n                sensor_id=sensor_id,\n            )\n        )\n\n    async def adata_raw(\n        self,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: DataValueType | None = None,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValue]:\n        \"\"\"Get raw data for a city.\n\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type, defaults to None\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of data values\n        \"\"\"\n        return DataValues.validate_python(\n            await self._pulse_eco_api.adata_raw(\n                from_=from_,\n                to=to,\n                type=type.value if type is not None else None,\n                sensor_id=sensor_id,\n            )\n        )\n\n    def avg_data(\n        self,\n        period: AveragePeriod,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: DataValueType,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValue]:\n        \"\"\"Get average data for a city.\n\n        :param period: the period of the average data\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of average data values\n        \"\"\"\n        return DataValues.validate_python(\n            self._pulse_eco_api.avg_data(\n                period=period,\n                from_=from_,\n                to=to,\n                type=type.value,\n                sensor_id=sensor_id,\n            )\n        )\n\n    async def aavg_data(\n        self,\n        period: AveragePeriod,\n        from_: str | datetime.datetime,\n        to: str | datetime.datetime,\n        type: DataValueType,\n        sensor_id: str | None = None,\n    ) -&gt; list[DataValue]:\n        \"\"\"Get average data for a city.\n\n        :param period: the period of the average data\n        :param from_: the start datetime of the data\n            as a datetime object or an isoformat string\n        :param to: the end datetime of the data\n            as a datetime object or an isoformat string\n        :param type: the data value type\n        :param sensor_id: the unique ID of the sensor, defaults to None\n        :return: a list of average data values\n        \"\"\"\n        return DataValues.validate_python(\n            await self._pulse_eco_api.aavg_data(\n                period=period,\n                from_=from_,\n                to=to,\n                type=type.value,\n                sensor_id=sensor_id,\n            )\n        )\n\n    def data24h(self) -&gt; list[DataValue]:\n        \"\"\"Get 24h data for a city.\n\n        The data values are sorted ascending by their timestamp.\n\n        :return: a list of data values for the past 24 hours\n        \"\"\"\n        return DataValues.validate_python(self._pulse_eco_api.data24h())\n\n    async def adata24h(self) -&gt; list[DataValue]:\n        \"\"\"Get 24h data for a city.\n\n        The data values are sorted ascending by their timestamp.\n\n        :return: a list of data values for the past 24 hours\n        \"\"\"\n        return DataValues.validate_python(await self._pulse_eco_api.adata24h())\n\n    def current(self) -&gt; list[DataValue]:\n        \"\"\"Get the last received valid data for each sensor in a city.\n\n        Will not return sensor data older than 2 hours.\n\n        :return: a list of current data values\n        \"\"\"\n        return DataValues.validate_python(self._pulse_eco_api.current())\n\n    async def acurrent(self) -&gt; list[DataValue]:\n        \"\"\"Get the last received valid data for each sensor in a city.\n\n        Will not return sensor data older than 2 hours.\n\n        :return: a list of current data values\n        \"\"\"\n        return DataValues.validate_python(await self._pulse_eco_api.acurrent())\n\n    def overall(self) -&gt; Overall:\n        \"\"\"Get the current average data for all sensors per value for a city.\n\n        :return: the overall data for the city\n        \"\"\"\n        return Overall.model_validate(self._pulse_eco_api.overall())\n\n    async def aoverall(self) -&gt; Overall:\n        \"\"\"Get the current average data for all sensors per value for a city.\n\n        :return: the overall data for the city\n        \"\"\"\n        return Overall.model_validate(await self._pulse_eco_api.aoverall())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.__init__","title":"<code>__init__(city_name, auth=None, base_url=PULSE_ECO_BASE_URL_FORMAT, session=None, client=None, async_client=None, pulse_eco_api=None)</code>","text":"<p>Initialize the pulse.eco client.</p> <p>Parameters:</p> Name Type Description Default <code>city_name</code> <code>str</code> <p>the city name</p> required <code>auth</code> <code>tuple[str, str] | None</code> <p>a tuple of (email, password), defaults to None</p> <code>None</code> <code>base_url</code> <code>str</code> <p>the base URL of the API, defaults to 'https://{city_name}.pulse.eco/rest/{end_point}'</p> <code>PULSE_ECO_BASE_URL_FORMAT</code> <code>session</code> <code>None</code> <p>deprecated, use client and async_client instead</p> <code>None</code> <code>client</code> <code>CLIENT | None</code> <p>a sync http client, supported types are: requests.Session, httpx.Client, defaults to None which uses a new requests.Session for each request, use a context managed session for better performance and resource management</p> <code>None</code> <code>async_client</code> <code>ASYNC_CLIENT | None</code> <p>an async http client, supported types are: aiohttp.ClientSession, httpx.AsyncClient, defaults to None which will use the sync client</p> <code>None</code> <code>pulse_eco_api</code> <code>PulseEcoAPIBase | None</code> <p>a pulse.eco API wrapper, defaults to None, if set, the other parameters are ignored</p> <code>None</code> Source code in <code>pulseeco/client/client.py</code> <pre><code>def __init__(\n    self,\n    city_name: str,\n    auth: tuple[str, str] | None = None,\n    base_url: str = PULSE_ECO_BASE_URL_FORMAT,\n    session: None = None,\n    client: CLIENT | None = None,\n    async_client: ASYNC_CLIENT | None = None,\n    pulse_eco_api: PulseEcoAPIBase | None = None,\n) -&gt; None:\n    \"\"\"Initialize the pulse.eco client.\n\n    :param city_name: the city name\n    :param auth: a tuple of (email, password), defaults to None\n    :param base_url: the base URL of the API, defaults to\n        'https://{city_name}.pulse.eco/rest/{end_point}'\n    :param session: deprecated, use client and async_client instead\n    :param client: a sync http client, supported types are:\n        requests.Session, httpx.Client,\n        defaults to None which uses a new requests.Session for each request,\n        use a context managed session for better performance and resource management\n    :param async_client: an async http client, supported types are:\n        aiohttp.ClientSession, httpx.AsyncClient,\n        defaults to None which will use the sync client\n    :param pulse_eco_api: a pulse.eco API wrapper, defaults to None,\n        if set, the other parameters are ignored\n    \"\"\"\n    self._pulse_eco_api: PulseEcoAPIBase\n    if pulse_eco_api is None:\n        self._pulse_eco_api = PulseEcoAPI(\n            city_name=city_name,\n            auth=auth,\n            base_url=base_url,\n            session=session,\n            client=client,\n            async_client=async_client,\n        )\n    else:\n        self._pulse_eco_api = pulse_eco_api\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.aavg_data","title":"<code>aavg_data(period, from_, to, type, sensor_id=None)</code>  <code>async</code>","text":"<p>Get average data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>AveragePeriod</code> <p>the period of the average data</p> required <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>DataValueType</code> <p>the data value type</p> required <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of average data values</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def aavg_data(\n    self,\n    period: AveragePeriod,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: DataValueType,\n    sensor_id: str | None = None,\n) -&gt; list[DataValue]:\n    \"\"\"Get average data for a city.\n\n    :param period: the period of the average data\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of average data values\n    \"\"\"\n    return DataValues.validate_python(\n        await self._pulse_eco_api.aavg_data(\n            period=period,\n            from_=from_,\n            to=to,\n            type=type.value,\n            sensor_id=sensor_id,\n        )\n    )\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.acurrent","title":"<code>acurrent()</code>  <code>async</code>","text":"<p>Get the last received valid data for each sensor in a city.</p> <p>Will not return sensor data older than 2 hours.</p> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of current data values</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def acurrent(self) -&gt; list[DataValue]:\n    \"\"\"Get the last received valid data for each sensor in a city.\n\n    Will not return sensor data older than 2 hours.\n\n    :return: a list of current data values\n    \"\"\"\n    return DataValues.validate_python(await self._pulse_eco_api.acurrent())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.adata24h","title":"<code>adata24h()</code>  <code>async</code>","text":"<p>Get 24h data for a city.</p> <p>The data values are sorted ascending by their timestamp.</p> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of data values for the past 24 hours</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def adata24h(self) -&gt; list[DataValue]:\n    \"\"\"Get 24h data for a city.\n\n    The data values are sorted ascending by their timestamp.\n\n    :return: a list of data values for the past 24 hours\n    \"\"\"\n    return DataValues.validate_python(await self._pulse_eco_api.adata24h())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.adata_raw","title":"<code>adata_raw(from_, to, type=None, sensor_id=None)</code>  <code>async</code>","text":"<p>Get raw data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>DataValueType | None</code> <p>the data value type, defaults to None</p> <code>None</code> <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of data values</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def adata_raw(\n    self,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: DataValueType | None = None,\n    sensor_id: str | None = None,\n) -&gt; list[DataValue]:\n    \"\"\"Get raw data for a city.\n\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type, defaults to None\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of data values\n    \"\"\"\n    return DataValues.validate_python(\n        await self._pulse_eco_api.adata_raw(\n            from_=from_,\n            to=to,\n            type=type.value if type is not None else None,\n            sensor_id=sensor_id,\n        )\n    )\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.aoverall","title":"<code>aoverall()</code>  <code>async</code>","text":"<p>Get the current average data for all sensors per value for a city.</p> <p>Returns:</p> Type Description <code>Overall</code> <p>the overall data for the city</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def aoverall(self) -&gt; Overall:\n    \"\"\"Get the current average data for all sensors per value for a city.\n\n    :return: the overall data for the city\n    \"\"\"\n    return Overall.model_validate(await self._pulse_eco_api.aoverall())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.asensor","title":"<code>asensor(sensor_id)</code>  <code>async</code>","text":"<p>Get a sensor by it's ID.</p> <p>Parameters:</p> Name Type Description Default <code>sensor_id</code> <code>str</code> <p>the unique ID of the sensor</p> required <p>Returns:</p> Type Description <code>Sensor</code> <p>a sensor</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def asensor(self, sensor_id: str) -&gt; Sensor:\n    \"\"\"Get a sensor by it's ID.\n\n    :param sensor_id: the unique ID of the sensor\n    :return: a sensor\n    \"\"\"\n    return Sensor.model_validate(\n        await self._pulse_eco_api.asensor(sensor_id=sensor_id)\n    )\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.asensors","title":"<code>asensors()</code>  <code>async</code>","text":"<p>Get all sensors for a city.</p> <p>Returns:</p> Type Description <code>list[Sensor]</code> <p>a list of sensors</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>async def asensors(self) -&gt; list[Sensor]:\n    \"\"\"Get all sensors for a city.\n\n    :return: a list of sensors\n    \"\"\"\n    return Sensors.validate_python(await self._pulse_eco_api.asensors())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.avg_data","title":"<code>avg_data(period, from_, to, type, sensor_id=None)</code>","text":"<p>Get average data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <code>AveragePeriod</code> <p>the period of the average data</p> required <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>DataValueType</code> <p>the data value type</p> required <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of average data values</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def avg_data(\n    self,\n    period: AveragePeriod,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: DataValueType,\n    sensor_id: str | None = None,\n) -&gt; list[DataValue]:\n    \"\"\"Get average data for a city.\n\n    :param period: the period of the average data\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of average data values\n    \"\"\"\n    return DataValues.validate_python(\n        self._pulse_eco_api.avg_data(\n            period=period,\n            from_=from_,\n            to=to,\n            type=type.value,\n            sensor_id=sensor_id,\n        )\n    )\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.current","title":"<code>current()</code>","text":"<p>Get the last received valid data for each sensor in a city.</p> <p>Will not return sensor data older than 2 hours.</p> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of current data values</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def current(self) -&gt; list[DataValue]:\n    \"\"\"Get the last received valid data for each sensor in a city.\n\n    Will not return sensor data older than 2 hours.\n\n    :return: a list of current data values\n    \"\"\"\n    return DataValues.validate_python(self._pulse_eco_api.current())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.data24h","title":"<code>data24h()</code>","text":"<p>Get 24h data for a city.</p> <p>The data values are sorted ascending by their timestamp.</p> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of data values for the past 24 hours</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def data24h(self) -&gt; list[DataValue]:\n    \"\"\"Get 24h data for a city.\n\n    The data values are sorted ascending by their timestamp.\n\n    :return: a list of data values for the past 24 hours\n    \"\"\"\n    return DataValues.validate_python(self._pulse_eco_api.data24h())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.data_raw","title":"<code>data_raw(from_, to, type=None, sensor_id=None)</code>","text":"<p>Get raw data for a city.</p> <p>Parameters:</p> Name Type Description Default <code>from_</code> <code>str | datetime</code> <p>the start datetime of the data as a datetime object or an isoformat string</p> required <code>to</code> <code>str | datetime</code> <p>the end datetime of the data as a datetime object or an isoformat string</p> required <code>type</code> <code>DataValueType | None</code> <p>the data value type, defaults to None</p> <code>None</code> <code>sensor_id</code> <code>str | None</code> <p>the unique ID of the sensor, defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DataValue]</code> <p>a list of data values</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def data_raw(\n    self,\n    from_: str | datetime.datetime,\n    to: str | datetime.datetime,\n    type: DataValueType | None = None,\n    sensor_id: str | None = None,\n) -&gt; list[DataValue]:\n    \"\"\"Get raw data for a city.\n\n    :param from_: the start datetime of the data\n        as a datetime object or an isoformat string\n    :param to: the end datetime of the data\n        as a datetime object or an isoformat string\n    :param type: the data value type, defaults to None\n    :param sensor_id: the unique ID of the sensor, defaults to None\n    :return: a list of data values\n    \"\"\"\n    return DataValues.validate_python(\n        self._pulse_eco_api.data_raw(\n            from_=from_,\n            to=to,\n            type=type.value if type is not None else None,\n            sensor_id=sensor_id,\n        )\n    )\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.overall","title":"<code>overall()</code>","text":"<p>Get the current average data for all sensors per value for a city.</p> <p>Returns:</p> Type Description <code>Overall</code> <p>the overall data for the city</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def overall(self) -&gt; Overall:\n    \"\"\"Get the current average data for all sensors per value for a city.\n\n    :return: the overall data for the city\n    \"\"\"\n    return Overall.model_validate(self._pulse_eco_api.overall())\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.sensor","title":"<code>sensor(sensor_id)</code>","text":"<p>Get a sensor by it's ID.</p> <p>Parameters:</p> Name Type Description Default <code>sensor_id</code> <code>str</code> <p>the unique ID of the sensor</p> required <p>Returns:</p> Type Description <code>Sensor</code> <p>a sensor</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def sensor(self, sensor_id: str) -&gt; Sensor:\n    \"\"\"Get a sensor by it's ID.\n\n    :param sensor_id: the unique ID of the sensor\n    :return: a sensor\n    \"\"\"\n    return Sensor.model_validate(self._pulse_eco_api.sensor(sensor_id=sensor_id))\n</code></pre>"},{"location":"PulseEcoClient/#pulseeco.client.PulseEcoClient.sensors","title":"<code>sensors()</code>","text":"<p>Get all sensors for a city.</p> <p>Returns:</p> Type Description <code>list[Sensor]</code> <p>a list of sensors</p> Source code in <code>pulseeco/client/client.py</code> <pre><code>def sensors(self) -&gt; list[Sensor]:\n    \"\"\"Get all sensors for a city.\n\n    :return: a list of sensors\n    \"\"\"\n    return Sensors.validate_python(self._pulse_eco_api.sensors())\n</code></pre>"},{"location":"environment-variables/","title":"Environment variables","text":""},{"location":"environment-variables/#base-url-format","title":"Base URL format","text":"<p>Environment variable: <code>PULSE_ECO_BASE_URL_FORMAT</code></p> <p>The default base URL format is <code>https://{city_name}.pulse.eco/rest/{end_point}</code>.</p>"},{"location":"environment-variables/#authentication","title":"Authentication","text":"<p>Authentication is not required for fetching data. But if provided, it has to be valid for the city.</p> <p>Credentials can also be provided as environment variables. To provide credentials for a city, use the following format:</p> <pre><code>PULSE_ECO_{city_name}_USERNAME\nPULSE_ECO_{city_name}_PASSWORD\n</code></pre> <p>Example environmtent variables in priority order:</p> <pre><code>PULSE_ECO_SKOPJE_USERNAME\nPULSE_ECO_SKOPJE_PASSWORD\n\nPULSE_ECO_skopje_USERNAME\nPULSE_ECO_skopje_PASSWORD\n\nPULSE_ECO_USERNAME\nPULSE_ECO_PASSWORD\n</code></pre> <p>Only use the generic <code>PULSE_ECO_USERNAME</code> and <code>PULSE_ECO_PASSWORD</code> environment variables if your application requests data from a single city.</p>"},{"location":"example-usage/","title":"Example usage","text":""},{"location":"example-usage/#initialize-client","title":"Initialize client","text":"<p>Authentication is not required for fetching data. But if provided, it has to be valid. Authentication is per city.</p> <pre><code>from pulseeco.client import PulseEcoClient\n\npulse_eco = PulseEcoClient(city_name=\"skopje\", auth=(\"user\", \"pass\"))\n</code></pre>"},{"location":"example-usage/#get-all-sensors","title":"Get all sensors","text":"<pre><code>&gt;&gt;&gt; pulse_eco.sensors()\n[\n  Sensor(\n    sensor_id='sensor_dev_60237_141',\n    position='42.03900255426,21.40771061182',\n    comments='Imported Sensor.community #60237',\n    type='20004',\n    description='Sensor.community 60237',\n    status='NOT_CLAIMED'\n  ),\n  Sensor(\n    sensor_id='sensor_dev_10699_244',\n    position='41.986,21.452',\n    comments='Imported Sensor.community #10699',\n    type='20004',\n    description='Sensor.community 10699',\n    status='NOT_CLAIMED_UNCONFIRMED'\n  ),\n  Sensor(\n    sensor_id='66710fdc-cdfc-4bbe-93a8-7e796fb8a88d',\n    position='41.995238146587674,21.402708292007443',\n    comments='V1 WiFi sensor in Kozle',\n    type='1',\n    description='Kozle',\n    status='ACTIVE'\n  ),\n  ...\n]\n</code></pre>"},{"location":"example-usage/#get-a-sensor-by-id","title":"Get a sensor by id","text":"<pre><code>&gt;&gt;&gt; pulse_eco.sensor(sensor_id=\"1000\")\nSensor(\n  sensor_id='1000',\n  position='41.99249998,21.4236110',\n  comments='MOEPP sensor at Centar',\n  type='0',\n  description='MOEPP Centar',\n  status='ACTIVE'\n)\n</code></pre>"},{"location":"example-usage/#get-raw-data","title":"Get raw data","text":"<p><code>from_</code> and <code>to</code> can be either <code>datetime.datetime</code> objects or <code>str</code> in ISO 8601 format.</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from pulseeco.client import DataValueType\n&gt;&gt;&gt; pulse_eco.data_raw(\n...   from_=datetime.datetime(year=2017, month=3, day=15, hour=2),\n...   to=datetime.datetime(year=2017, month=4, day=19, hour=12),\n...   type=DataValueType.PM10,\n...   sensor_id=\"1001\",\n... )\n[\n  DataValue(sensor_id='1001', stamp=datetime.datetime(2017, 3, 15, 3, 0, 8, tzinfo=TzInfo(+01:00)), type='pm10', position='41.9783,21.47', value=28, year=None),\n  DataValue(sensor_id='1001', stamp=datetime.datetime(2017, 3, 15, 4, 0, 8, tzinfo=TzInfo(+01:00)), type='pm10', position='41.9783,21.47', value=55, year=None),\n  ...\n  DataValue(sensor_id='1001', stamp=datetime.datetime(2017, 4, 19, 12, 0, 9, tzinfo=TzInfo(+02:00)), type='pm10', position='41.9783,21.47', value=6, year=None),\n  DataValue(sensor_id='1001', stamp=datetime.datetime(2017, 4, 19, 13, 0, 9, tzinfo=TzInfo(+02:00)), type='pm10', position='41.9783,21.47', value=31, year=None)\n]\n</code></pre>"},{"location":"example-usage/#get-average-data","title":"Get average data","text":"<p>sensor_id <code>\"-1\"</code> is a magic value that gives average values for the whole city.</p> <pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from pulseeco.client import AveragePeriod, DataValueType\n&gt;&gt;&gt; pulse_eco.avg_data(\n...   period=AveragePeriod.MONTH,\n...   from_=datetime.datetime(year=2019, month=3, day=1, hour=12),\n...   to=datetime.datetime(year=2020, month=5, day=1, hour=12),\n...   type=DataValueType.PM10,\n...   sensor_id=\"-1\",\n... )\n[\n  DataValue(sensor_id='-1', stamp=datetime.datetime(2019, 3, 1, 13, 0, tzinfo=TzInfo(+01:00)), type='pm10', position='', value=29, year=None),\n  DataValue(sensor_id='-1', stamp=datetime.datetime(2019, 4, 1, 14, 0, tzinfo=TzInfo(+02:00)), type='pm10', position='', value=19, year=None),\n  ...\n  DataValue(sensor_id='-1', stamp=datetime.datetime(2020, 4, 1, 14, 0, tzinfo=TzInfo(+02:00)), type='pm10', position='', value=17, year=None),\n  DataValue(sensor_id='-1', stamp=datetime.datetime(2020, 5, 1, 14, 0, tzinfo=TzInfo(+02:00)), type='pm10', position='', value=12, year=None)\n]\n</code></pre>"},{"location":"example-usage/#get-24h-data","title":"Get 24h data","text":"<pre><code>&gt;&gt;&gt; pulse_eco.data24h()\n[ ... ]\n</code></pre>"},{"location":"example-usage/#get-current-data","title":"Get current data","text":"<p>Get the last received valid data for each sensor in a city.</p> <pre><code>&gt;&gt;&gt; pulse_eco.current()\n[ ... ]\n</code></pre>"},{"location":"example-usage/#get-overall-data","title":"Get overall data","text":"<p>Get the current average data for all sensors per value for a city.</p> <pre><code>&gt;&gt;&gt; pulse_eco.overall()\nOverall(\n  city_name='skopje',\n  values=OverallValues(\n    no2=6,\n    o3=10,\n    so2=None,\n    co=None,\n    pm25=56,\n    pm10=95,\n    temperature=6,\n    humidity=73,\n    pressure=995,\n    noise=None,\n    noise_dba=42,\n    gas_resistance=None\n  )\n)\n</code></pre>"},{"location":"http-clients/","title":"HTTP Clients","text":"<p>The <code>pulse-eco</code> package is designed to be modular and compatible with different HTTP clients.</p>"},{"location":"http-clients/#supported-clients","title":"Supported clients","text":"<p>The following HTTP clients are currently supported:</p>"},{"location":"http-clients/#sync","title":"Sync","text":"<ul> <li><code>requests</code></li> <li><code>httpx</code></li> </ul>"},{"location":"http-clients/#async","title":"Async","text":"<ul> <li><code>aiohttp</code></li> <li><code>httpx</code></li> </ul>"},{"location":"http-clients/#context-management","title":"Context management","text":"<p>It is recommended to always use context managers when working with HTTP clients.</p> <p>Examples:</p> <pre><code>import requests\n\nfrom pulseeco.client import PulseEcoClient\n\nwith requests.Session() as client:\n    pulse_eco = PulseEcoClient(city_name=\"skopje\", client=client)\n    pulse_eco.sensors()\n</code></pre> <pre><code>import aiohttp\n\nfrom pulseeco.client import PulseEcoClient\n\nasync with aiohttp.ClientSession() as client:\n    pulse_eco = PulseEcoClient(city_name=\"skopje\", async_client=client)\n    await pulse_eco.asensors()\n</code></pre> <pre><code>import httpx\n\nfrom pulseeco.client import PulseEcoClient\n\nasync with httpx.AsyncClient() as client:\n    pulse_eco = PulseEcoClient(city_name=\"skopje\", async_client=client)\n    await pulse_eco.asensors()\n</code></pre>"}]}